// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  encrytped_password String // This is the hashed password
  videos    Video[]   // This establishes a one-to-many relation from User to Video
  comments  Comment[] // This establishes a one-to-many relation from User to Comment
  assignmentsReported    Assignment[]  @relation("reporter")
  assignmentsAssignedTo  Assignment[]  @relation("assignee")
}

model Video {
  id          Int       @id @default(autoincrement())
  title       String
  path        String    // This could be the file path or URL to the video
  ownerId     Int       // Foreign key to the User model
  owner       User      @relation(fields: [ownerId], references: [id]) // This is where the relationship is established
  assignmentVideoVersions    AssignmentVideoVersion[] 
}

model Assignment {
  id        Int    @id @default(autoincrement())
  title     String
  status    Status @default(OPEN) // Example statuses: PENDING, REVIEWING, DONE
  reporterId Int // This is the ID of the user who reported the assignment
  reporter   User @relation("reporter",fields: [reporterId], references: [id])
  assigneeId Int? // This is the ID of the user who is assigned to the assignment
  assignee   User? @relation("assignee",fields: [assigneeId], references: [id])
  videoVersions AssignmentVideoVersion[] // One-to-many relation from Assignment to VideoVersion
}

model AssignmentVideoVersion {
  id             Int       @id @default(autoincrement())
  assignmentId   Int
  assignment     Assignment @relation(fields: [assignmentId], references: [id])
  videoId        Int
  video          Video     @relation(fields: [videoId], references: [id])
  uploadedAt     DateTime  @default(now())
  comments       Comment[] // One-to-many relation from AssignmentVideoVersion to Comment
}

model Comment {
  id           Int       @id @default(autoincrement())
  content      String
  timestamp    DateTime  @default(now())       // This could represent the timestamp in the video where the comment is added
  userId       Int // user who created the comment
  user         User @relation(fields: [userId], references: [id])
  videoVersionId Int // This is the ID of the video version that this comment is associated with
  videoVersion   AssignmentVideoVersion @relation(fields: [videoVersionId], references: [id])
}

enum Status {
  OPEN
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}
